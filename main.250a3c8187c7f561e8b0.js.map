{"version":3,"sources":["webpack:///./first-task.js","webpack:///./second-task.js","webpack:///./third-task.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","arr","logError","warn","amount","catch"],"mappings":"2JAAMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACTF,EAAQF,KACPA,OAIDK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,G,kCCbXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAId,SAAQ,SAACC,EAASC,GAC3BD,EACEY,EAASE,KAAI,SAAAC,GAAI,OACfA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAM/DZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAS7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GC3BnC,IAIMe,EAAkB,SAAAC,GACtB,IALiCC,EAAKC,EAKhCxB,GAL2BuB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMpD,OAAO,IAAIrB,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACUoB,KAAKE,SAAW,GAGjCxB,EAAQ,CAACmB,EAAYM,GAAI5B,IAEzBI,EAAOkB,EAAYM,MAEpB5B,OAID6B,EAAa,SAAC,GAAqB,iBAARC,IAAQ,EAApBF,EAAoB,KAAhBrB,EAAgB,KACvCC,QAAQC,IAAR,eAA2BmB,EAA3B,iBAA8CrB,EAA9C,OAGIwB,EAAW,SAAAH,GACfpB,QAAQwB,KAAR,gCAA6CJ,EAA7C,8BAaFP,EAAgB,CAAEO,GAAI,GAAIK,OAAQ,MAAOvB,KAAKmB,GAAYK,MAAMH,GAEhEV,EAAgB,CAAEO,GAAI,GAAIK,OAAQ,MAAOvB,KAAKmB,GAAYK,MAAMH,GAEhEV,EAAgB,CAAEO,GAAI,GAAIK,OAAQ,KAAMvB,KAAKmB,GAAYK,MAAMH,GAE/DV,EAAgB,CAAEO,GAAI,GAAIK,OAAQ,MAAOvB,KAAKmB,GAAYK,MAAMH,K","file":"main.250a3c8187c7f561e8b0.js","sourcesContent":["const delay = ms => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise((resolve, reject) => {\r\n    resolve(\r\n      allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user,\r\n      ),\r\n    );\r\n  });\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve([transaction.id, delay]);\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ([id, time] = arr) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n"],"sourceRoot":""}